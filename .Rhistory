require(devtools)
create_package("./")
create_package("/Users/shimpeimorimoto/Dropbox/Research_project/Rpackages/FractCurve")
bibentry(bibtype = "Manual",
title = "{FractCurve}: Finding a point of fracture on a curve.",
author = c(person("Shimpei", "Morimoto")
year = {2019},
url = "https://github.com/mrmtshmp/FractCurve")
bibentry(bibtype = "Manual",
title = "{FractCurve}: Finding a point of fracture on a curve.",
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = "https://github.com/mrmtshmp/FractCurve")
)
bibentry(bibtype = "Manual",
title = "{FractCurve}: Finding a point of fracture on a curve.",
author = c(person("Shimpei", "Morimoto")),
year = {2019},
url = "https://github.com/mrmtshmp/FractCurve")
bibentry(bibtype = "Manual",
title = {{FractCurve}: Finding a point of fracture on a curve.},
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {https://github.com/mrmtshmp/FractCurve}
)
bibentry(bibtype = "Manual",
title = {{FractCurve}: Finding a point of fracture on a curve.},
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
bibentry(bibtype = "Manual",
title = {FractCurve}: Finding a point of fracture on a curve.,
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
bibentry(bibtype = "Manual",
title = '{FractCurve}: Finding a point of fracture on a curve.',
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
)
bibentry(bibtype = "Manual",
title = {{FractCurve}: Finding a point of fracture on a curve.},
author = c(person("Shimpei", "Morimoto")),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
bibentry(bibtype = "Manual",
title = '{{FractCurve}: Finding a point of fracture on a curve.}',
author = c(person("Shimpei", "Morimoto")),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
R.version()
R.version
require(FractCurve)
install_github("mrmtshmp/FractCurve")
require(devtools)
install_github("mrmtshmp/FractCurve")
require(FractCurve)
install_github("mrmtshmp/FractCurve")
unload("FractCurve")
require("FractCurve")
vignette("FractCurve")
unload("FractCurve")
devtools::install_github("mrmtshmp/FractCurve", build_vignettes = TRUE)
vignette('FractCurve', 'FractCurve')
devtools::install_github("mrmtshmp/FractCurve", force=TRUE, build_vignettes = TRUE)
vignette('FractCurve', 'FractCurve')
unload("FractCurve")
devtools::install_github("mrmtshmp/FractCurve", force=TRUE, build_vignettes = TRUE)
vignette('FractCurve', 'FractCurve')
require(devtools())
require(devtools
)
document()
document()
document()
help(hclust)
help(dist)
help(unlist)
help(expand_grid)
document()
document()
check()
document()
document()
document()
document()
document()
document()
document()
test <- matric(c(1,2,3,4), ncol=2)
test <- matrix(c(1,2,3,4), ncol=2)
res.fish <- fisher.test(test)
res.fish
res.fish$p.value
res.fish$var <- 222
res.fish$var
res.fish
names(res.fish)
require(devtools)
document()
check()
OTUdata_all
document()
fract_curve_clust
check()
check()
check()
check()
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=TRUE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
for(i in 1:10){
mat_i <- matrix(
c(
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1)
),
ncol = 50
)
if(i==1){mat <- mat_i}else{mat <- rbind(mat,mat_i)}
}
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=TRUE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=FALSE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
require(knitr)
include_graphics("Finding_a_point_of_fracture.pdf")
require(tidyverse)
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=FALSE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = NULL,
get.df_of_IYs=FALSE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
plot(heatmap(mat))
document()
unload("FractCurve")
install_github("mrmtshmp/FractCurve")
require(FractCurve)
document()
unload("FractCurve")
install_github("mrmtshmp/FractCurve")
require(FractCurve)
200*8/50
document()
require(devtools)
document()
document()
fract_curve_clust_test <- function(
df.features  = OTUdata_all,
df.phenotype = pData(obj.ADS),
var.phenoGroup = 'Disease',
method.dist.row   ='manhattan',
method.dist.col   ='manhattan',
method.hclust.row ='ward',
method.hclust.col ='ward',
fisher_test=TRUE,
dir.output = NULL,
get.df_of_IYs,
fn.plot_pdf = NULL,
fn.df_of_IYs = NULL
){
rowv.hc <- hclust(
vegan::vegdist(
as.matrix(
df.features
) %>% t(),
method=method.dist.row
),
method = method.hclust.row
)
rowv <- rowv.hc %>%
as.dendrogram()
colv.hc <- hclust(
vegan::vegdist(
t(
as.matrix(
df.features
)
) %>% t(),
method = method.dist.col
),
method = method.hclust.col
)
colv <- colv.hc %>%
as.dendrogram()
res.clust <- list(colv.hc, rowv.hc)
df.height <-
data.frame(
height=max(res.clust[[1]]$height)-res.clust[[1]]$height,
event =1
)
df.res.fracrcurve <- FractCurve::fract_curve(
df.height,
var.time = 'height',
var.event = 'event',
fn.plot_pdf = fn.plot_pdf,
dir.output = dir.output,
get.df_of_IYs = get.df_of_IYs,
fn.df_of_IYs = fn.df_of_IYs
)
df.res.fracrcurve <-
df.res.fracrcurve[
order(df.res.fracrcurve$km.fit.time),
]
clusters <- cutree(
res.clust[[1]],
k = which(df.res.fracrcurve$rank.I.Y==1)
)
if(fisher_test){
group <- df.phenotype[,var.phenoGroup]
names(group) <-
rownames(
df.phenotype
)
row.select <-
expand_grid(
a=unique(clusters),
b=unique(clusters)
) %>%
filter(a < b)
res.test <- list()
for(i in 1:nrow(row.select)){
print(clusters)
print(group)
row.select_i <- unlist(c(row.select[i,'a'], row.select[i,'b']))
res.test_i <- fisher.test(
as.matrix(
table(clusters, group)[
row.select_i,
]
)
)
res.test_i$vs.info <- sprintf("%s vs %s", row.select[i,'a'], row.select[i,'b'])
res.test[[i]] <- res.test_i
}
df.res.test <- sapply(
lapply(
res.test,
function(x){t(data.frame(unlist(x)))}
),
function(x){unlist(data.frame(x))}
) %>%
t() %>%
data.frame() %>%
mutate(
p.value=round(as.numeric(p.value), 3),
conf.int1=round(as.numeric(conf.int1), 3),
conf.int2=round(as.numeric(conf.int2), 3),
estimate.odds.ratio=round(as.numeric(estimate.odds.ratio), 3)
)
return(
list(
df.res.fracrcurve,
res.clust,
clusters,
df.res.test
)
)
}else{
return(
list(
df.res.fracrcurve,
res.clust,
clusters
)
)
}
}
document()
cumsum(3)
cumsum(1:3)
max(res.clust[[1]]$height)-res.clust[[1]]$height
require(devtools)
document()
document()
test<- matrix(c(1,2,10,5,6,70,4,5,20), ncol=3)
test
test <- t(test)
test
hclust(vegdist(test,method = "horn"),"ward.D")
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
hclust.test$height
plot(hclust.test)
test<- matrix(c(1,2,3,10,5,6,4,70,4,5,2,20), ncol=3)
test <- t(test)
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
plot(hclust.test)
test
test<- matrix(c(1,2,3,10,5,6,4,70,4,5,2,20), ncol=3)
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
plot(hclust.test)
hclust.test$labels
hclust.test$order
cutree(hclust.test,k = 3)
test<- matrix(c(1,2,3,10,5,6,4,70,4,5,2,20,5,4,3,19), ncol=3)
test<- matrix(c(1,2,3,10,5,6,4,70,4,5,2,20,5,4,3,19), ncol=4)
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
plot(hclust.test)
test
test<- matrix(c(1,2,3,10,5,6,4,70,4,5,2,20,5,4,3,19), ncol=2)
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
plot(hclust.test)
hclust.test$height
plot(1:7,hclust.test$height)
test
rownames(test) <- LETTERS[1:8]
test
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
plot(1:7,hclust.test$height)
plot(hclust.test)
plot(1:7,hclust.test$height)
hclust.test$height
plot(1:7,hclust.test$height)
plot(1:7,max(hclust.test$height)-hclust.test$height)
test_2 <- test/rowSums(test)
test_2
hclust.test <- hclust(vegdist(test_2,method = "horn"),"ward.D")
plot(hclust.test)
hclust.test <- hclust(vegdist(test,method = "horn"),"ward.D")
plot(hclust.test)
devtools()
document()
require)NbClust
require(NbClust)
help(NbClust)
document()
check()
document()
document()
document()
require(devtools)
check()
document()
install.packages('coda.base')
document()
check()
use_package('coda.base')
check()
use_package('ggplot2')
use_package('vegan')
check()
