require(devtools)
create_package("./")
create_package("/Users/shimpeimorimoto/Dropbox/Research_project/Rpackages/FractCurve")
bibentry(bibtype = "Manual",
title = "{FractCurve}: Finding a point of fracture on a curve.",
author = c(person("Shimpei", "Morimoto")
year = {2019},
url = "https://github.com/mrmtshmp/FractCurve")
bibentry(bibtype = "Manual",
title = "{FractCurve}: Finding a point of fracture on a curve.",
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = "https://github.com/mrmtshmp/FractCurve")
)
bibentry(bibtype = "Manual",
title = "{FractCurve}: Finding a point of fracture on a curve.",
author = c(person("Shimpei", "Morimoto")),
year = {2019},
url = "https://github.com/mrmtshmp/FractCurve")
bibentry(bibtype = "Manual",
title = {{FractCurve}: Finding a point of fracture on a curve.},
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {https://github.com/mrmtshmp/FractCurve}
)
bibentry(bibtype = "Manual",
title = {{FractCurve}: Finding a point of fracture on a curve.},
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
bibentry(bibtype = "Manual",
title = {FractCurve}: Finding a point of fracture on a curve.,
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
bibentry(bibtype = "Manual",
title = '{FractCurve}: Finding a point of fracture on a curve.',
author = c(person("Shimpei", "Morimoto"),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
)
bibentry(bibtype = "Manual",
title = {{FractCurve}: Finding a point of fracture on a curve.},
author = c(person("Shimpei", "Morimoto")),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
bibentry(bibtype = "Manual",
title = '{{FractCurve}: Finding a point of fracture on a curve.}',
author = c(person("Shimpei", "Morimoto")),
year = {2019},
url = {"https://github.com/mrmtshmp/FractCurve"}
)
R.version()
R.version
require(FractCurve)
install_github("mrmtshmp/FractCurve")
require(devtools)
install_github("mrmtshmp/FractCurve")
require(FractCurve)
install_github("mrmtshmp/FractCurve")
unload("FractCurve")
require("FractCurve")
vignette("FractCurve")
unload("FractCurve")
devtools::install_github("mrmtshmp/FractCurve", build_vignettes = TRUE)
vignette('FractCurve', 'FractCurve')
devtools::install_github("mrmtshmp/FractCurve", force=TRUE, build_vignettes = TRUE)
vignette('FractCurve', 'FractCurve')
unload("FractCurve")
devtools::install_github("mrmtshmp/FractCurve", force=TRUE, build_vignettes = TRUE)
vignette('FractCurve', 'FractCurve')
require(devtools())
require(devtools
)
document()
document()
document()
help(hclust)
help(dist)
help(unlist)
help(expand_grid)
document()
document()
check()
document()
document()
document()
document()
document()
document()
document()
test <- matric(c(1,2,3,4), ncol=2)
test <- matrix(c(1,2,3,4), ncol=2)
res.fish <- fisher.test(test)
res.fish
res.fish$p.value
res.fish$var <- 222
res.fish$var
res.fish
names(res.fish)
require(devtools)
document()
check()
OTUdata_all
document()
fract_curve_clust
check()
check()
check()
check()
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=TRUE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
for(i in 1:10){
mat_i <- matrix(
c(
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1),
rnorm(200,rnbinom(n = 1, size = 10, mu = 5)-1,1)
),
ncol = 50
)
if(i==1){mat <- mat_i}else{mat <- rbind(mat,mat_i)}
}
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=TRUE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=FALSE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
require(knitr)
include_graphics("Finding_a_point_of_fracture.pdf")
require(tidyverse)
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = dir.Output,
get.df_of_IYs=FALSE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
res.fract_curve_clust <- fract_curve_clust(
df.features = as.data.frame(mat),
method.dist.row = "manhattan", method.dist.col = "manhattan",
method.hclust.row = "ward", method.hclust.col = "ward",
dir.output = NULL,
get.df_of_IYs=FALSE,
fn.plot_pdf =NULL,
fn.df_of_IYs = NULL,
fisher_test = FALSE
)
plot(heatmap(mat))
document()
unload("FractCurve")
install_github("mrmtshmp/FractCurve")
require(FractCurve)
document()
unload("FractCurve")
install_github("mrmtshmp/FractCurve")
require(FractCurve)
200*8/50
document()
